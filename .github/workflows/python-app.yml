# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read # Needed to checkout the code

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5 # Use latest major version
      with:
        python-version: "3.12" # Use major.minor version

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip # The path pip uses for caching downloads
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install testing tools first
        pip install flake8 pytest
        # Install application requirements if the file exists
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install FanFicFare from TestPyPI
        python -m pip install --no-cache-dir -i https://test.pypi.org/simple/ FanFicFare

    - name: Lint with flake8
      run: |
        echo "Running flake8 checks..."
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "Flake8 checks complete."

    - name: Test with pytest
      run: |
        # Create directory for test results if it doesn't exist
        mkdir -p junit
        pytest --junitxml=junit/test-results.xml

    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results.xml
      # Always run this step to upload results even if tests fail
      if: always()
