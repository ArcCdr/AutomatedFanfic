name: Python application CI

on:
  # Keep existing triggers for PRs and direct pushes, but add path filters
  push:
    branches: [ "master" ]
    paths:
      - '*.py' # Python files in root
      - 'root/**/*.py' # Python files in root directory tree
      - 'requirements.txt' # Main requirements file
      - 'release-versions/**' # Version files that affect builds
      - '.github/workflows/python-app.yml' # Run if the workflow itself changes
  pull_request:
    branches: [ "master" ]
    paths:
      - '*.py'
      - 'root/**/*.py'
      - 'requirements.txt'
      - 'release-versions/**'
      - '.github/workflows/python-app.yml'
  # workflow_call trigger remains unchanged and runs whenever called
  workflow_call:
    inputs:
      commit_sha:
        description: 'The specific commit SHA to checkout and test'
        required: true
        type: string

permissions:
  contents: read # Needed to checkout the code

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Checkout the specific SHA if triggered by workflow_call, otherwise default behavior
        ref: ${{ github.event_name == 'workflow_call' && inputs.commit_sha || github.ref }}

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}-${{ hashFiles('.github/workflows/python-app.yml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml', '**/setup.py') }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        echo "Upgrading pip..."
        python -m pip install --upgrade pip
        
        echo "Installing testing tools..."
        pip install flake8 pytest
        
        # Install application requirements if the file exists
        if [ -f requirements.txt ]; then
          echo "Installing requirements from requirements.txt..."
          pip install -r requirements.txt
        else
          echo "::warning::requirements.txt not found, skipping application dependencies"
        fi
        
        echo "Installing FanFicFare from TestPyPI..."
        python -m pip install --no-cache-dir -i https://test.pypi.org/simple/ FanFicFare
        
        echo "Verifying FanFicFare installation..."
        # FanFicFare stores version in cli.py, not in __version__
        python -c "import fanficfare.cli as cli; print(f'FanFicFare version: {cli.version}')" || \
        python -c "import importlib.metadata; print(f'FanFicFare version: {importlib.metadata.version(\"FanFicFare\")}')" || \
        echo "::warning::Could not verify FanFicFare installation"

    - name: Lint with flake8
      run: |
        echo "Running flake8 checks..."
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "Flake8 checks complete."

    - name: Test with pytest
      id: pytest # Give step an ID to reference outcome if needed
      run: |
        echo "Discovering Python test files..."
        find . -name "*_test.py" -o -name "test_*.py" | head -10
        
        echo "Running pytest..."
        # Create directory for test results if it doesn't exist
        mkdir -p junit
        
        # Run pytest with verbose output and capture results
        pytest --junitxml=junit/test-results.xml --verbose --tb=short
        
        # Verify test results were generated
        if [ -f junit/test-results.xml ]; then
          echo "Test results saved to junit/test-results.xml"
          # Show basic test summary from XML
          if command -v xmllint &> /dev/null; then
            TESTS=$(xmllint --xpath "string(//testsuite/@tests)" junit/test-results.xml 2>/dev/null || echo "unknown")
            FAILURES=$(xmllint --xpath "string(//testsuite/@failures)" junit/test-results.xml 2>/dev/null || echo "unknown")
            ERRORS=$(xmllint --xpath "string(//testsuite/@errors)" junit/test-results.xml 2>/dev/null || echo "unknown")
            echo "Test Summary: $TESTS tests run, $FAILURES failures, $ERRORS errors"
          fi
        else
          echo "::warning::Test results XML was not generated"
        fi

    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-3.12
        path: junit/test-results.xml
      # Always run this step to upload results even if tests fail
      if: always()
