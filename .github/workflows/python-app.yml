name: Python application CI

on:
  # Keep existing triggers for PRs and direct pushes
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  # Add the workflow_call trigger
  workflow_call:
    inputs:
      commit_sha:
        description: 'The specific commit SHA to checkout and test'
        required: true
        type: string

permissions:
  contents: read # Needed to checkout the code

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Checkout the specific SHA if triggered by workflow_call, otherwise default behavior
        ref: ${{ github.event_name == 'workflow_call' && inputs.commit_sha || github.ref }}

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install testing tools first
        pip install flake8 pytest
        # Install application requirements if the file exists
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # Install FanFicFare from TestPyPI
        python -m pip install --no-cache-dir -i https://test.pypi.org/simple/ FanFicFare

    - name: Lint with flake8
      run: |
        echo "Running flake8 checks..."
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "Flake8 checks complete."

    - name: Test with pytest
      id: pytest # Give step an ID to reference outcome if needed
      run: |
        # Create directory for test results if it doesn't exist
        mkdir -p junit
        pytest --junitxml=junit/test-results.xml

    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-3.12
        path: junit/test-results.xml
      # Always run this step to upload results even if tests fail
      if: always()
