name: Publish Docker Image

on:
  # Trigger automatically AFTER "Python application CI" completes successfully on master
  workflow_run:
    workflows: ["Python application CI"]
    types:
      - completed
    branches:
      - master
  # Triggered explicitly by update-dependencies after successful CI
  workflow_call:
    inputs:
      commit_sha:
        description: 'The specific commit SHA to checkout and build (from update-dependencies)'
        required: true # Required when called
        type: string
    secrets: # Define secrets that can be passed by the caller
      DOCKERHUB_USER:
        required: true
      DOCKERHUB_PASSWORD:
        required: true
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch, tag, or SHA to build (default: master)'
        required: false
        default: 'master'

env:
  IMAGE_REPO: mrtyton
  IMAGE_NAME: automated-ffdl

jobs:
  Push_Docker_Image:
    # Run if dispatched OR if workflow_run succeeded OR if called (implied)
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      # Determine the commit SHA based on trigger type
      - name: Determine Commit SHA
        id: get_sha
        run: |
          COMMIT_TO_CHECKOUT=""
          EVENT_NAME="${{ github.event_name }}"
          # Capture input explicitly, provide empty string default if not present
          INPUT_SHA="${{ inputs.commit_sha || '' }}" 

          echo "Event Name: $EVENT_NAME" # Debugging
          echo "Input SHA (from inputs context): $INPUT_SHA" # Debugging

          # Prioritize checking for the specific input from workflow_call
          if [ -n "$INPUT_SHA" ]; then
            # If input SHA exists, we assume it's the workflow_call from update-dependencies
            COMMIT_TO_CHECKOUT="$INPUT_SHA"
            echo "Using commit SHA from input: $COMMIT_TO_CHECKOUT (Assuming workflow_call trigger)"
            # Optional: Add a warning if event name doesn't match expectation, but still use the SHA
            if [ "$EVENT_NAME" != "workflow_call" ]; then
               echo "::warning:: Input SHA is present, but event name is '$EVENT_NAME'. Proceeding with input SHA."
            fi
          # If no input SHA, check other event types
          elif [ "$EVENT_NAME" == "workflow_run" ]; then
            COMMIT_TO_CHECKOUT="${{ github.event.workflow_run.head_sha }}"
            echo "Using commit SHA from workflow_run event: $COMMIT_TO_CHECKOUT"
          elif [ "$EVENT_NAME" == "workflow_dispatch" ]; then
            # Handle workflow_dispatch (only runs if INPUT_SHA was empty)
            DISPATCH_REF="${{ github.event.inputs.ref || github.ref_name }}" # Use input ref or branch name
            echo "Attempting checkout for workflow_dispatch (ref: $DISPATCH_REF)..."
            # Need to checkout first to resolve ref locally if it's not a full SHA
            # This checkout is temporary just to get the SHA
            git clone $GITHUB_SERVER_URL/$GITHUB_REPOSITORY . # Clone repo first
            git checkout $DISPATCH_REF
            COMMIT_TO_CHECKOUT=$(git rev-parse HEAD)
            echo "Using commit SHA for workflow_dispatch (ref: $DISPATCH_REF): $COMMIT_TO_CHECKOUT"
            # Clean up temporary clone? Not strictly necessary as runner cleans up.
            # The main checkout step later will handle the actual workspace state.
          else
             echo "::error::Unknown event type '$EVENT_NAME' or unable to determine SHA."
             exit 1
          fi

          if [ -z "$COMMIT_TO_CHECKOUT" ]; then
             echo "::error::Failed to determine a valid commit SHA."
             exit 1
          fi

          echo "Final commit_sha=$COMMIT_TO_CHECKOUT"
          echo "commit_sha=$COMMIT_TO_CHECKOUT" >> $GITHUB_OUTPUT

      # Checkout the specific commit determined above
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_sha.outputs.commit_sha }}
          fetch-depth: 2 # Fetch commit and parent for diff (needed for workflow_run)

      # Check if the specific file was changed (only relevant for workflow_run)
      - name: Check for changes in latest.txt (for workflow_run)
        id: check_file
        # Only run this check if triggered by workflow_run
        if: github.event_name == 'workflow_run'
        run: |
          # Compare the checked-out commit (HEAD) with its parent (HEAD~1)
          if git diff --quiet HEAD~1 HEAD -- 'release-versions/latest.txt'; then
            echo "No changes detected in release-versions/latest.txt for commit ${{ steps.get_sha.outputs.commit_sha }}."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in release-versions/latest.txt for commit ${{ steps.get_sha.outputs.commit_sha }}."
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true # Handle first commit case

      # --- Subsequent steps run if dispatched OR called OR if file changed on workflow_run ---
      - name: Set up QEMU
        # Run if dispatched OR called OR if workflow_run AND file changed
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || steps.check_file.outputs.changed == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || steps.check_file.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      # Determine versions by reading files (always run if build proceeds)
      - name: Determine Versions and Tags from Files
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || steps.check_file.outputs.changed == 'true'
        id: set_versions
        run: |
          # Specific Version
          if [ -s "release-versions/latest.txt" ]; then
            SPECIFIC_VERSION=$(cat release-versions/latest.txt)
            echo "Read specific_version from file: $SPECIFIC_VERSION"
          else
            echo "::error::release-versions/latest.txt is missing or empty."
            exit 1
          fi
          # Calibre Version
          if [ -s "release-versions/calibre.txt" ]; then
             CALIBRE_VERSION=$(cat release-versions/calibre.txt)
             echo "Read calibre_version from file: $CALIBRE_VERSION"
          else
             echo "::error::release-versions/calibre.txt is missing or empty."
             exit 1
          fi
          # FanFicFare Version
          if [ -s "release-versions/fanficfare.txt" ]; then
             FANFICFARE_VERSION=$(cat release-versions/fanficfare.txt)
             echo "Read fanficfare_version from file: $FANFICFARE_VERSION"
          else
             echo "::error::release-versions/fanficfare.txt is missing or empty."
             exit 1
          fi
          # Set environment variables for build args and tags
          echo "SPECIFIC_VERSION=$SPECIFIC_VERSION" >> $GITHUB_ENV
          echo "CALIBRE_VERSION=$CALIBRE_VERSION" >> $GITHUB_ENV
          echo "FANFICFARE_VERSION=$FANFICFARE_VERSION" >> $GITHUB_ENV
          # Put specific version tag first, then latest
          TAGS="${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:${SPECIFIC_VERSION},${{ env.IMAGE_REPO }}/${{ env.IMAGE_NAME }}:latest"
          echo "TAGS=$TAGS" >> $GITHUB_ENV
          echo "Docker Tags: $TAGS"

      - name: Print image tags and versions
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || steps.check_file.outputs.changed == 'true'
        run: |
          echo "Commit SHA: ${{ steps.get_sha.outputs.commit_sha }}"
          echo "Specific Version Tag: ${{ env.SPECIFIC_VERSION }}"
          echo "Calibre Version: ${{ env.CALIBRE_VERSION }}"
          echo "FanFicFare Version: ${{ env.FANFICFARE_VERSION }}" # Print FanFicFare version
          echo "Full Tags: ${{ env.TAGS }}"

      - name: Login to DockerHub
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || steps.check_file.outputs.changed == 'true'
        uses: docker/login-action@v3.0.0
        with:
          # Use secrets passed from the caller (workflow_call) or repository secrets (workflow_dispatch/workflow_run)
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || steps.check_file.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.TAGS }}
          # Add cache settings
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ env.SPECIFIC_VERSION }}
            CALIBRE_RELEASE=${{ env.CALIBRE_VERSION }}

      # Updated step to generate filtered changelog including requirements.txt and excluding bot commits
      - name: Generate Changelog
        id: generate_changelog
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || steps.check_file.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed for fetch
          CURRENT_COMMIT_SHA: ${{ steps.get_sha.outputs.commit_sha }}
        run: |
          echo "Fetching tags..."
          # Fetch tags and full history needed for log between tags
          # Ensure fetch-depth is sufficient in checkout or unshallow here
          git fetch --tags --unshallow --force || git fetch --tags --force

          # Get the latest tag that looks like a version (e.g., v1.2.3) excluding the one we might create
          PREVIOUS_TAG=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | grep -v "v${{ env.SPECIFIC_VERSION }}$" | head -n 1)

          CHANGELOG_ENTRIES=""
          # Define bot author name
          BOT_AUTHOR="github-actions[bot]"

          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Found previous tag: $PREVIOUS_TAG. Generating filtered changelog since then."
            # Get commits since the previous tag affecting relevant files, excluding bot commits
            # Format: '* Commit subject (commit_sha)'
            COMMITS=$(git log ${PREVIOUS_TAG}..${CURRENT_COMMIT_SHA} --pretty=format:'* %s (%h)' --invert-grep --author="$BOT_AUTHOR" -- '**/*.py' 'Dockerfile' 'requirements.txt') # Changed *.py to **/*.py
            if [ -n "$COMMITS" ]; then
              CHANGELOG_ENTRIES="\n\n**Relevant Changes since ${PREVIOUS_TAG}:**\n${COMMITS}"
            else
              CHANGELOG_ENTRIES="\n\nNo relevant non-bot code changes (Python/Dockerfile/requirements.txt) detected since ${PREVIOUS_TAG}."
            fi
          else
            echo "No previous version tag found. Listing all relevant commits for initial release."
            # List all commits up to the current one affecting relevant files, excluding bot commits
            COMMITS=$(git log ${CURRENT_COMMIT_SHA} --pretty=format:'* %s (%h)' --invert-grep --author="$BOT_AUTHOR" -- '**/*.py' 'Dockerfile' 'requirements.txt') # Changed *.py to **/*.py
            if [ -n "$COMMITS" ]; then
              CHANGELOG_ENTRIES="\n\n**Relevant Commits in this release:**\n${COMMITS}"
            else
              # Added a message for the initial release case with no relevant commits
              CHANGELOG_ENTRIES="\n\nNo relevant non-bot code changes (Python/Dockerfile/requirements.txt) detected in this initial release scope."
            fi
          fi

          # Set the output, escaping for multiline
          echo "changelog_body<<EOF" >> $GITHUB_OUTPUT
          echo -e "${CHANGELOG_ENTRIES}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Generated Changelog Body:"
          echo -e "${CHANGELOG_ENTRIES}" # Print for debugging using echo -e

      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call' || steps.check_file.outputs.changed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ env.SPECIFIC_VERSION }}
          release_name: Release v${{ env.SPECIFIC_VERSION }}
          body: |
            Automated release for version ${{ env.SPECIFIC_VERSION }}.
            Built from commit: ${{ steps.get_sha.outputs.commit_sha }}
            Includes Calibre version: ${{ env.CALIBRE_VERSION }}
            Includes FanFicFare version: ${{ env.FANFICFARE_VERSION }}${{ steps.generate_changelog.outputs.changelog_body }}

          draft: false
          prerelease: false

      # Optional: Add a step to indicate skipping if the file didn't change on workflow_run
      - name: Skipped build on workflow_run
        if: github.event_name == 'workflow_run' && steps.check_file.outputs.changed == 'false'
        run: echo "Docker build skipped because release-versions/latest.txt was not changed in commit ${{ steps.get_sha.outputs.commit_sha }}."